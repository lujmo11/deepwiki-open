[tool.poetry]
name = "neuron"
version = "0.72.0"
authors = [
    "Jakob Vestergaard <javes@vestas.com>",
    "Marta Cadete Mauricio <macdm@vestas.com>",
    "Victor Aguirre Børsen-Koch <vcabs@vestas.com>",
    "Jes Ravnbøl <jervn@vestas.com>",
    "Kasper Lauritzen <karlr@vestas.com>",
]
description = "Package for training surrogate models."
readme = "README.md"
packages = [
    { include = "neuron", from = "src" },
    { include = "neuron_prediction_service", from = "src" },
    { include = "neuron_training_service", from = "src" },
]


[tool.poetry.dependencies]
python = ">=3.12,<3.13"
pydantic = "^2.9.0"
azure-core = "^1.30.0"
azure-identity = "^1.15.0"
azure-keyvault = "^4.2.0"
mapie = "^0.8.2"
nbformat = "^5.9.2"
mlflow = "^2.10.0"
pandas = "^2.2.0"
plotly = "^5.18.0"
scikit-learn = "1.5.2"
torch = "^2.2.0"
tqdm = "^4.66.1"
seaborn = "^0.13.2"
shapely = "^2.0.2"
gpytorch = "^1.11"
pandera = "^0.21.0"
fastparquet = "^2024.2.0"
azure-storage-blob = "^12.19.1"
rich = "^13.7.1"
alphashape = "^1.3.1"
databricks-sdk = "^0.28.0"
setuptools = "^70.1.1"
pydantic-settings = "^2.5.2"
structlog = "^24.4.0"
vestas-dobby = "^0.13.0"
pyspark = "^3.5.5"
python-dotenv = "^1.0.1"

[tool.poetry.group.dev]
optional = true
[tool.poetry.group.dev.dependencies]
pytest = "^8.0.0"
coverage = "^7.4.1"
pytest-cov = "^4.1.0"
httpx = "^0.26.0"
ipykernel = "^6.29.0"
locust = "^2.22.0"
typer = "^0.12.3"
pre-commit = "^3.6.0"
pytest-xdist = "^3.5.0"
hydra-core = "^1.3.2"
streamlit = "^1.39.0"
streamlit-plotly-events = "^0.0.6"
optuna = "^4.1.0"

[tool.poetry.group.api]
optional = true
[tool.poetry.group.api.dependencies]
uvicorn = "^0.27.0.post1"
fastapi = "^0.109.2"
prometheus-fastapi-instrumentator = "^7.0.0"

[tool.poetry.scripts]
train = "neuron.turbine_train_run:main"
eval = "neuron.turbine_eval_run:main"
model_store_release = "neuron_prediction_service.model_store_service.release_cli:app"

[[tool.poetry.source]]
name = "MLPlatform"
url = "https://vestas.pkgs.visualstudio.com/817bea7b-8b3f-4ea3-9533-beda138ead72/_packaging/MLPlatform/pypi/simple/"
priority = "primary"

[tool.ruff]
line-length = 100
target-version = "py312"

[tool.ruff.lint.isort]
known-first-party = [
    "neuron",
    "neuron_prediction_service",
    "neuron_training_service",
]
known-third-party = ["databricks"]

[tool.ruff.lint]
# See rules: https://docs.astral.sh/ruff/rules/
select = [
    "ANN001", # flake8-annotations - Missing type annotation for function argument
    "ANN201", # flake8-annotations - Missing return type annotation for public function
    "ARG001", # unused-function-argument - Checks for the presence of unused arguments in function definitions
    "B",      # flake8-bugbear
    "C90",    # mccabe complexity
    "E",      # pycodestyle
    "F",      # pyflakes
    "I",      # isort
    "PD",     # pandas-vet
    "RUF100", # unused noqa directive
]

# More settings: https://beta.ruff.rs/docs/settings/
# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

[tool.pytest.ini_options]
markers = ["slow: mark test as slow.", "api: mark test as a test of the api."]
