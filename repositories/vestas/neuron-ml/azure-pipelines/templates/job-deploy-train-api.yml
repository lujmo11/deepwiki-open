parameters:
  - name: acr_service_connection
    type: string
  - name: env
    type: string
    values:
      - dev
      - staging
      - prod
  - name: acr_login_server
    type: string
  - name: service_principal_id
    type: string
  - name: service_principal_secret
    type: string
  - name: test_url
    type: string
    # example: https://training-neuron-prod.neuron-azweu-dev.vks.vestas.net/version
  - name: train_api_client_id
    type: string
  - name: train_api_client_secret
    type: string
  - name: source_internal_storage_account_name
    type: string
  - name: source_simmesh_storage_account_name
    type: string
  - name: target_internal_storage_account_name
    type: string
  - name: databricks_host
    type: string
  - name: databricks_job_id
    type: string
  - name: train_api_allowed_api_keys
    type: string
jobs:
  - job: build
    displayName: Build image
    pool:
      vmImage: ubuntu-latest
    steps:
      - script: |
          # Crazy hack to free up disk space. Docker build uses more than 20GB of disk space!! 
          df -h
          echo now freeing disk space
          # 2024-04-25: Trying to just use a few of these tricks. It all takes time, and we don't need that much extra space
          # sudo rm -rf /usr/local/lib/android # android sdks
          # sudo rm -rf /usr/local/.ghcup # haskell stuff
          sudo rm -rf /opt/hostedtoolcache/CodeQL # github code analysis engine
          echo freed up space:
          df -h
        displayName: Free up disk space
      - task: Docker@2
        displayName: Login to ACR
        inputs:
          command: login
          containerRegistry: ${{ parameters.acr_service_connection }}
      - task: Docker@2
        displayName: Build
        inputs:
          command: build
          Dockerfile: src/neuron_training_service/Dockerfile
          buildContext: .
          containerRegistry: ${{ parameters.acr_service_connection }}
          repository: training-api
          arguments: --build-arg BUILD_NUMBER=$(Build.BuildNumber) --build-arg GIT_SHA=$(Build.SourceVersion) --build-arg AZURE_FEED_TOKEN=$(System.AccessToken) --target=final
          tags: |
            latest
            $(Build.BuildNumber)
            ${{ parameters.env }}
        env:
          DOCKER_BUILDKIT: 1
      - task: Docker@2
        displayName: Push
        inputs:
          command: push
          containerRegistry: ${{ parameters.acr_service_connection }}
          repository: training-api
          tags: |
            latest
            $(Build.BuildNumber)
            ${{ parameters.env }}
  - job: deploy
    pool: AI CoE Peered Agent Pool
    dependsOn:
      - build
    steps:
      - template: step-install-k8s-deployment-tools.yml
      - task: DownloadSecureFile@1
        name: kubeconfig
        displayName: "Download kubeconfig"
        inputs:
          secureFile: "neuron-azweu-dev.yaml"
      - bash: |
          mkdir -p ~/.kube
          cp $(kubeconfig.secureFilePath) ~/.kube/config
          kubectl config set-context --current --namespace=neuron-${{ parameters.env }}
        displayName: Set up kubectl
      - bash: |
          kubectl create secret docker-registry shared-registry \
            --docker-server=${{ parameters.acr_login_server }} \
            --docker-username=${{ parameters.service_principal_id }} \
            --docker-password=${{ parameters.service_principal_secret }} \
            --dry-run=client -o yaml \
            | kubectl apply -f -
        displayName: Configure private registry
      - bash: |
          set -e
          yq -i '.stringData.AZURE_CLIENT_ID=strenv(AZURE_CLIENT_ID)' k8s/train/base/secret.yaml
          yq -i '.stringData.AZURE_CLIENT_SECRET=strenv(AZURE_CLIENT_SECRET)' k8s/train/base/secret.yaml
          yq -i '.stringData.ARM_CLIENT_ID=strenv(ARM_CLIENT_ID)' k8s/train/base/secret.yaml
          yq -i '.stringData.ARM_CLIENT_SECRET=strenv(ARM_CLIENT_SECRET)' k8s/train/base/secret.yaml
          yq -i '.stringData.TARGET_INTERNAL_STORAGE_ACCOUNT_NAME=strenv(SOURCE_INTERNAL_STORAGE_ACCOUNT_NAME)' k8s/train/base/secret.yaml
          yq -i '.stringData.SOURCE_INTERNAL_STORAGE_ACCOUNT_NAME=strenv(SOURCE_INTERNAL_STORAGE_ACCOUNT_NAME)' k8s/train/base/secret.yaml
          yq -i '.stringData.SOURCE_SIMMESH_STORAGE_ACCOUNT_NAME=strenv(SOURCE_SIMMESH_STORAGE_ACCOUNT_NAME)' k8s/train/base/secret.yaml
          yq -i '.stringData.TRAIN_API_ALLOWED_API_KEYS=strenv(TRAIN_API_ALLOWED_API_KEYS)' k8s/train/base/secret.yaml
          yq -i '.stringData.DATABRICKS_HOST=strenv(DATABRICKS_HOST)' k8s/train/base/secret.yaml
          yq -i '.stringData.DATABRICKS_JOB_ID=strenv(DATABRICKS_JOB_ID)' k8s/train/base/secret.yaml
          yq -i '.stringData.TRAINING_API_TARGET_BASE_DIR=strenv(TRAINING_API_TARGET_BASE_DIR)' k8s/train/base/secret.yaml
          yq -i '.images[0].newTag=strenv(IMAGE_TAG)' k8s/train/${{ parameters.env }}/kustomization.yaml
          kustomize build k8s/train/${{ parameters.env }} -o baked_chart.yaml
          kubectl apply -f baked_chart.yaml
        displayName: Deploy training API image
        env:
          IMAGE_TAG: $(Build.BuildNumber)
          AZURE_CLIENT_ID: ${{ parameters.train_api_client_id }}
          AZURE_CLIENT_SECRET: ${{ parameters.train_api_client_secret }}
          ARM_CLIENT_ID: ${{ parameters.train_api_client_id }}
          ARM_CLIENT_SECRET: ${{ parameters.train_api_client_secret }}
          SOURCE_INTERNAL_STORAGE_ACCOUNT_NAME: ${{ parameters.source_internal_storage_account_name }}
          SOURCE_SIMMESH_STORAGE_ACCOUNT_NAME: ${{ parameters.source_simmesh_storage_account_name }}
          TARGET_INTERNAL_STORAGE_ACCOUNT_NAME: ${{ parameters.target_internal_storage_account_name }}
          DATABRICKS_HOST: ${{ parameters.databricks_host }}
          DATABRICKS_JOB_ID: ${{ parameters.databricks_job_id }}
          TRAIN_API_ALLOWED_API_KEYS: ${{ parameters.train_api_allowed_api_keys }}
          TRAINING_API_TARGET_BASE_DIR: "api-${{ parameters.env }}"

      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: baked_chart.yaml
          artifact: training-api-${{ parameters.env }}
  - job: test
    pool: AI CoE Peered Agent Pool
    dependsOn:
      - deploy
    steps:
      - bash: |
          python3 scripts/test_deployed_api.py --base_url ${{ parameters.test_url }} --build_id $(Build.BuildNumber) --api train --allowed_retries 6 --api_keys ${{ parameters.train_api_allowed_api_keys }}
        displayName: Test API is deployed
